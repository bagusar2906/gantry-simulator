name: Build SimulatorðŸ§ª

on:
  workflow_dispatch: 
    inputs:
      targetPlatform:
        description: 'Target Platform'
        required: true
        default: 'WebGL'
        type: choice
        options:
          - WebGL
          - StandaloneWindows64
          - StandaloneLinux64
      runsOnServer:
        description: 'Runner Server'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
          - self-hosted
          - ubuntu-latest
          - windows-2019

jobs:
  checklicense:
    name: Check for UNITY_LICENSE in GitHub Secrets
    runs-on: ${{ inputs.runsOnServer }} 
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            export is_unity_license_set="${{ env.UNITY_LICENSE != '' }}"
            echo "is_unity_license_set=$is_unity_license_set" >> $GITHUB_OUTPUT
  activation:
    needs: checklicense
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request manual activation file ðŸ”‘
    runs-on: ${{ inputs.runsOnServer }} 
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  buildForAllSupportedPlatforms:    
    needs: checklicense
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ inputs.runsOnServer }} 
    strategy:
            fail-fast: false
            matrix:
                targetPlatform: 
                 - ${{ inputs.targetPlatform }} 
                
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Determine Next Version (if not tagged)
        id: determine_version
        if: ${{ github.ref_type != 'tag' }}
        shell: bash
        run: |
            # 1. Get latest tag (if any)
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            # 2. Increment version (example: patch version)
            if [[ -n "$latest_tag" ]]; then
              major=$(echo "$latest_tag" | grep -oE '^v([0-9]+)\.' | cut -d'.' -f1 | cut -c2-)
              minor=$(echo "$latest_tag" | grep -oE '\.([0-9]+)\.' | cut -d'.' -f2)
              patch=$(( $(echo "$latest_tag" | grep -oE '\.([0-9]+)$' | cut -d'.' -f2) + 1 ))
              next_version="v${major}.${minor}.${patch}"
            else
              next_version="v0.1.0" # Initial version
            fi
            echo "version=$next_version" >> $GITHUB_OUTPUT
  
      - name: Extract Version from Tag or Calculated Version
        id: extract_version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == 'tag' ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "version=${{ steps.determine_version.outputs.version }}" >> $GITHUB_ENV
          fi
  
      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # Test
  #     - name: Run tests
  #      uses: game-ci/unity-test-runner@v4
  #      env:
  #        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #      with:
  #       githubToken: ${{ secrets.ACCESS_TOKEN }}

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      # Output
      - uses: actions/upload-artifact@v4
        with:
          name: BuildBuild-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

      - name: Release (Only on Tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body: |
            * Release ${{ steps.extract_version.outputs.version }}
          files: |
            build/WebGL/*
